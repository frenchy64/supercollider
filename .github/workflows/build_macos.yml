name: Build Mac OS
on:
  workflow_call:
    inputs:
      sc-version:
        required: true
        type: string
      matrix:
        required: true
        type: string

jobs:
  build-macos:
    runs-on: macos-${{ toJSON(inputs.matrix).os-version }}
    name: macOS ${{ toJSON(inputs.matrix).job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_ENV_HINTS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      USE_SYSLIBS: ${{ toJSON(inputs.matrix).use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ toJSON(inputs.matrix).shared-libscsynth }}
      ARTIFACT_FILE: "SuperCollider-${{ inputs.sc-version }}-${{ toJSON(inputs.matrix).artifact-suffix }}.dmg"
      DEVELOPER_DIR: "/Applications/Xcode_${{ toJSON(inputs.matrix).xcode-version }}.app/Contents/Developer"
      MACOSX_DEPLOYMENT_TARGET: "${{ toJSON(inputs.matrix).deployment-target }}"
      CMAKE_OSX_ARCHITECTURES: "${{ toJSON(inputs.matrix).cmake-architectures }}"
      BREW_UNIVERSAL_WORKDIR: ${{ github.workspace }}/brew-universal
      SKIP_SIGNING: 1 # for brew-install-universal
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: prepare timestamp for cache
        id: current-date
        run: |
          echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "week=$(date '+%U')" >> $GITHUB_OUTPUT

      - name: cache ccache
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}-${{ toJSON(inputs.matrix).os-version }}-${{ toJSON(inputs.matrix).xcode-version }}-${{ toJSON(inputs.matrix).deployment-target }}-${{ toJSON(inputs.matrix).cmake-architectures }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ toJSON(inputs.matrix).os-version }}-${{ toJSON(inputs.matrix).xcode-version }}-${{ toJSON(inputs.matrix).deployment-target }}-${{ toJSON(inputs.matrix).cmake-architectures }}-

      - name: cleanup homebrew downloads # always remove existing downloads first, as we bring back relevant downloads from cache
        run: rm -rf $(brew --cache)/downloads

      - name: cache homebrew downloads
        uses: actions/cache@v4
        id: cache-homebrew
        with:
          path: ~/Library/Caches/Homebrew/downloads
          key: ${{ runner.os }}-${{ toJSON(inputs.matrix).os-version }}-${{ toJSON(inputs.matrix).cmake-architectures }}-homebrew-${{ steps.current-date.outputs.week }}
          restore-keys: ${{ runner.os }}-${{ toJSON(inputs.matrix).os-version }}-${{ toJSON(inputs.matrix).cmake-architectures }}-homebrew-

      - name: cache vcpkg
        if: toJSON(inputs.matrix).vcpkg-triplet
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/archives
          key: ${{ runner.os }}-${{ toJSON(inputs.matrix).os-version }}-${{ toJSON(inputs.matrix).xcode-version }}-${{ toJSON(inputs.matrix).deployment-target }}-${{ toJSON(inputs.matrix).vcpkg-triplet }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ toJSON(inputs.matrix).os-version }}-${{ toJSON(inputs.matrix).xcode-version }}-${{ toJSON(inputs.matrix).deployment-target }}-${{ toJSON(inputs.matrix).vcpkg-triplet }}-

      - name: setup ccache
        run: |
          brew install ccache --quiet
          # add ccache to PATH
          echo "`brew --prefix ccache`/libexec" >> $GITHUB_PATH

      - name: setup vcpkg # vcpkg is not automatically installed in newer macOS runner images
        if: toJSON(inputs.matrix).vcpkg-packages && toJSON(inputs.matrix).vcpkg-triplet
        run: |
          if [[ -z "${VCPKG_INSTALLATION_ROOT}" ]]; then
            cd ${{ github.workspace }}/..
            echo "setting up vcpkg in `pwd`"
            git clone https://github.com/microsoft/vcpkg.git
            cd vcpkg
            ls -a
            ./bootstrap-vcpkg.sh
            echo "VCPKG_INSTALLATION_ROOT=`pwd`" >> $GITHUB_ENV # use the same env var that was used for VCPKG in older runner images
            echo "`pwd`" >> $GITHUB_PATH
          fi

      - name: install homebrew packages
        if: toJSON(inputs.matrix).homebrew-packages
        run: brew install ${{ toJSON(inputs.matrix).homebrew-packages }} --quiet

      - name: install vcpkg packages
        if: toJSON(inputs.matrix).vcpkg-packages && toJSON(inputs.matrix).vcpkg-triplet
        run: |
          if [[ -n "${{ toJSON(inputs.matrix).homebrew-uninstall }}" ]]; then brew uninstall --ignore-dependencies ${{ toJSON(inputs.matrix).homebrew-uninstall }}; fi
          vcpkg install ${{ toJSON(inputs.matrix).vcpkg-packages }} --triplet="${{ toJSON(inputs.matrix).vcpkg-triplet }}" --overlay-triplets="$GITHUB_WORKSPACE/vcpkg/triplets"

      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v3
        if: toJSON(inputs.matrix).qt-version
        env:
          DEVELOPER_DIR: "" # remove developer dir which causes installation to fail
        with:
          modules: ${{ toJSON(inputs.matrix).qt-modules }}
          version: ${{ toJSON(inputs.matrix).qt-version }}
          cache: true
          cache-key-prefix: ${{ runner.os }}-qt${{ toJSON(inputs.matrix).qt-version }}-${{ toJSON(inputs.matrix).qt-modules }}

      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          CMAKE_FLAGS="-G Xcode -D RULE_LAUNCH_COMPILE=ccache -D SUPERNOVA=ON  ${{ toJSON(inputs.matrix).extra-cmake-flags }}"

          if [[ -n "${{ toJSON(inputs.matrix).vcpkg-triplet }}" ]]; then
            export VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT
            CMAKE_FLAGS="-DVCPKG_TARGET_TRIPLET=${{ toJSON(inputs.matrix).vcpkg-triplet }} -DCMAKE_BUILD_TYPE=Release $CMAKE_FLAGS"
          fi

          echo "CMAKE_FLAGS:" $CMAKE_FLAGS

          cmake $CMAKE_FLAGS ..

      - name: build
        run: cmake --build $BUILD_PATH --config Release --target install

      - name: create archive
        if: toJSON(inputs.matrix).artifact-suffix
        run: |
          cd $INSTALL_PATH
          ln -s /Applications SuperCollider/Applications
          mkdir -p SuperCollider/.background
          cp ../../package/background_2_arrow.png SuperCollider/.background/background_2_arrow.png
          cp ../../package/ds_store SuperCollider/.DS_Store
          # the following assumes that we end up with the build in the folder SuperCollider
          # hdiutil sometimes fails with "create failed - Resource busy"
          # when that happens, we run it again
          hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE || hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        if: toJSON(inputs.matrix).artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
