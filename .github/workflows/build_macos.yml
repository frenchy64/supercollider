name: Build Mac OS
on:
  workflow_call:
    inputs:
      sc-version:
        required: true
        type: string
      test-splits:
        required: true
        type: number
      job-name:
        required: true
        type: string
      os-version:
        required: true
        type: string
      xcode-version:
        required: true
        type: string
      qt-version:
        required: true
        type: string
      qt-modules:
        required: true
        type: string
      deployment-target:
        required: true
        type: string
      cmake-architectures:
        required: true
        type: string
      homebrew-packages:
        required: true
        type: string
      vcpkg-packages:
        required: true
        type: string
      vcpkg-triplet:
        required: true
        type: string
      extra-cmake-flags:
        required: true
        type: string
      artifact-suffix:
        required: true
        type: string

jobs:
  build-macos:
    runs-on: macos-${{ inputs.os-version }}
    outputs:
      test-matrix: ${{ steps.set-test-matrix.outputs.test-matrix }}

    name: macOS ${{ inputs.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_ENV_HINTS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      USE_SYSLIBS: ${{ inputs.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ inputs.shared-libscsynth }}
      ARTIFACT_FILE: "SuperCollider-${{ inputs.sc-version }}-${{ inputs.artifact-suffix }}.dmg"
      DEVELOPER_DIR: "/Applications/Xcode_${{ inputs.xcode-version }}.app/Contents/Developer"
      MACOSX_DEPLOYMENT_TARGET: "${{ inputs.deployment-target }}"
      CMAKE_OSX_ARCHITECTURES: "${{ inputs.cmake-architectures }}"
      BREW_UNIVERSAL_WORKDIR: ${{ github.workspace }}/brew-universal
      SKIP_SIGNING: 1 # for brew-install-universal
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: prepare timestamp for cache
        id: current-date
        run: |
          echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "week=$(date '+%U')" >> $GITHUB_OUTPUT

      - name: cache ccache
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}-${{ inputs.os-version }}-${{ inputs.xcode-version }}-${{ inputs.deployment-target }}-${{ inputs.cmake-architectures }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ inputs.os-version }}-${{ inputs.xcode-version }}-${{ inputs.deployment-target }}-${{ inputs.cmake-architectures }}-

      - name: cache vcpkg
        if: inputs.vcpkg-triplet
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/archives
          key: ${{ runner.os }}-${{ inputs.os-version }}-${{ inputs.xcode-version }}-${{ inputs.deployment-target }}-${{ inputs.vcpkg-triplet }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ inputs.os-version }}-${{ inputs.xcode-version }}-${{ inputs.deployment-target }}-${{ inputs.vcpkg-triplet }}-

      - name: setup ccache
        run: |
          brew install ccache --quiet
          # add ccache to PATH
          echo "`brew --prefix ccache`/libexec" >> $GITHUB_PATH

      - name: setup vcpkg # vcpkg is not automatically installed in newer macOS runner images
        if: inputs.vcpkg-packages && inputs.vcpkg-triplet
        run: |
          if [[ -z "${VCPKG_INSTALLATION_ROOT}" ]]; then
            cd ${{ github.workspace }}/..
            echo "setting up vcpkg in `pwd`"
            git clone https://github.com/microsoft/vcpkg.git
            cd vcpkg
            ls -a
            ./bootstrap-vcpkg.sh
            echo "VCPKG_INSTALLATION_ROOT=`pwd`" >> $GITHUB_ENV # use the same env var that was used for VCPKG in older runner images
            echo "`pwd`" >> $GITHUB_PATH
          fi

      - name: install homebrew packages
        if: inputs.homebrew-packages
        run: brew install ${{ inputs.homebrew-packages }} --quiet

      - name: install vcpkg packages
        if: inputs.vcpkg-packages && inputs.vcpkg-triplet
        run: |
          if [[ -n "${{ inputs.homebrew-uninstall }}" ]]; then brew uninstall --ignore-dependencies ${{ inputs.homebrew-uninstall }}; fi
          vcpkg install ${{ inputs.vcpkg-packages }} --triplet="${{ inputs.vcpkg-triplet }}" --overlay-triplets="$GITHUB_WORKSPACE/vcpkg/triplets"

      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v4
        if: inputs.qt-version
        env:
          DEVELOPER_DIR: "" # remove developer dir which causes installation to fail
        with:
          modules: ${{ inputs.qt-modules }}
          version: ${{ inputs.qt-version }}
          cache: true
          cache-key-prefix: ${{ runner.os }}-qt${{ inputs.qt-version }}-${{ inputs.qt-modules }}

      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          CMAKE_FLAGS="-G Xcode -D RULE_LAUNCH_COMPILE=ccache -D SUPERNOVA=ON  ${{ inputs.extra-cmake-flags }}"

          if [[ -n "${{ inputs.vcpkg-triplet }}" ]]; then
            export VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT
            CMAKE_FLAGS="-DVCPKG_TARGET_TRIPLET=${{ inputs.vcpkg-triplet }} -DCMAKE_BUILD_TYPE=Release $CMAKE_FLAGS"
          fi

          echo "CMAKE_FLAGS:" $CMAKE_FLAGS

          CMAKE_BUILD_PARALLEL_LEVEL=1 cmake $CMAKE_FLAGS ..

      - name: build
        run: cmake --build $BUILD_PATH --config Release --target install

      - name: create archive
        if: inputs.artifact-suffix
        run: |
          cd $INSTALL_PATH
          ln -s /Applications SuperCollider/Applications
          mkdir -p SuperCollider/.background
          cp ../../package/background_2_arrow.png SuperCollider/.background/background_2_arrow.png
          cp ../../package/ds_store SuperCollider/.DS_Store
          # the following assumes that we end up with the build in the folder SuperCollider
          # hdiutil sometimes fails with "create failed - Resource busy"
          # when that happens, we run it again
          hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE || hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        if: inputs.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}

      - uses: DeLaGuardo/setup-clojure@12.6
        if: inputs.artifact-suffix
        with:
          bb: 1.12.194
      # generates JSON array [0...test-splits-1] 
      - name: output test matrix
        id: set-test-matrix
        if: inputs.artifact-suffix
        run: bb -e '(spit (System/getenv "GITHUB_OUTPUT")
                          (doto (str "test-matrix=" (json/encode (range ${{ inputs.test-splits }}))
                                     "\n")
                            print)
                          :append true)'

  test-macos:
    needs: build-macos
    uses: ./.github/workflows/test_macos.yml
    if: inputs.artifact-suffix
    with:
      artifact-file: "SuperCollider-${{ inputs.sc-version }}-${{ inputs.artifact-suffix }}.dmg"
      os-version: ${{ inputs.os-version }}
      this-split: ${{ matrix.this-split }}
      nsplits: ${{ inputs.test-splits }}
    strategy:
      matrix:
        this-split: ${{ fromJSON(needs.build-macos.outputs.test-matrix) }}
    secrets: inherit
