name: Build Mac OS
on:
  workflow_call:
    inputs:
      params:
        required: true
        type: string
      matrix:
        required: true
        type: string

jobs:
  build-macos:
    runs-on: macos-${{ fromJSON(inputs.matrix).os-version }}
    name: macOS ${{ fromJSON(inputs.matrix).job-name }}
    timeout-minutes: 60
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_ENV_HINTS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      CMAKE_BUILD_PARALLEL_LEVEL: ${{ fromJSON(inputs.matrix).os-version == 13 && 4 || 3 }}
      USE_SYSLIBS: ${{ fromJSON(inputs.matrix).use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ fromJSON(inputs.matrix).shared-libscsynth }}
      ARTIFACT_FILE: "SuperCollider-${{ fromJSON(inputs.params).sc-version }}-${{ fromJSON(inputs.matrix).artifact-suffix }}.dmg"
      DEVELOPER_DIR: "/Applications/Xcode_${{ fromJSON(inputs.matrix).xcode-version }}.app/Contents/Developer"
      MACOSX_DEPLOYMENT_TARGET: "${{ fromJSON(inputs.matrix).deployment-target }}"
      CMAKE_OSX_ARCHITECTURES: "${{ fromJSON(inputs.matrix).cmake-architectures }}"
      BREW_UNIVERSAL_WORKDIR: ${{ github.workspace }}/brew-universal
      SKIP_SIGNING: 1 # for brew-install-universal
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
      - run: git submodule update --init --recursive --jobs $CMAKE_BUILD_PARALLEL_LEVEL

      - name: prepare timestamp for cache
        id: current-date
        run: |
          echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "week=$(date '+%U')" >> $GITHUB_OUTPUT

      - name: cache ccache
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).xcode-version }}-${{ fromJSON(inputs.matrix).deployment-target }}-${{ fromJSON(inputs.matrix).cmake-architectures }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).xcode-version }}-${{ fromJSON(inputs.matrix).deployment-target }}-${{ fromJSON(inputs.matrix).cmake-architectures }}-

      - name: cache vcpkg
        if: fromJSON(inputs.matrix).vcpkg-triplet
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/archives
          key: ${{ runner.os }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).xcode-version }}-${{ fromJSON(inputs.matrix).deployment-target }}-${{ fromJSON(inputs.matrix).vcpkg-triplet }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).xcode-version }}-${{ fromJSON(inputs.matrix).deployment-target }}-${{ fromJSON(inputs.matrix).vcpkg-triplet }}-

      - name: Install ccache
        uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: 'ccache'

      - name: Add ccache to PATH
        run: echo "`brew --prefix ccache`/libexec" >> $GITHUB_PATH

      - uses: lukka/run-vcpkg@v11

      - uses: tecolicom/actions-use-homebrew-tools@v1
        if: fromJSON(inputs.matrix).homebrew-packages
        with:
          tools: ${{ fromJSON(inputs.matrix).homebrew-packages }}

      - name: install vcpkg packages
        if: fromJSON(inputs.matrix).vcpkg-packages && fromJSON(inputs.matrix).vcpkg-triplet
        run: |
          if [[ -n "${{ fromJSON(inputs.matrix).homebrew-uninstall }}" ]]; then brew uninstall --ignore-dependencies ${{ fromJSON(inputs.matrix).homebrew-uninstall }}; fi
          vcpkg install ${{ fromJSON(inputs.matrix).vcpkg-packages }} --triplet="${{ fromJSON(inputs.matrix).vcpkg-triplet }}" --overlay-triplets="$GITHUB_WORKSPACE/vcpkg/triplets"

      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v4
        if: fromJSON(inputs.matrix).qt-version
        env:
          DEVELOPER_DIR: "" # remove developer dir which causes installation to fail
        with:
          modules: ${{ fromJSON(inputs.matrix).qt-modules }}
          version: ${{ fromJSON(inputs.matrix).qt-version }}
          cache: true

      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          CMAKE_FLAGS="-G Xcode -D RULE_LAUNCH_COMPILE=ccache -D SUPERNOVA=ON  ${{ fromJSON(inputs.matrix).extra-cmake-flags }}"

          if [[ -n "${{ fromJSON(inputs.matrix).vcpkg-triplet }}" ]]; then
            export VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT
            CMAKE_FLAGS="-DVCPKG_TARGET_TRIPLET=${{ fromJSON(inputs.matrix).vcpkg-triplet }} -DCMAKE_BUILD_TYPE=Release $CMAKE_FLAGS"
          fi

          echo "CMAKE_FLAGS:" $CMAKE_FLAGS

          CMAKE_BUILD_PARALLEL_LEVEL=1 cmake $CMAKE_FLAGS ..

      - name: build
        run: cmake --build $BUILD_PATH --config Release --target install

      - name: create archive
        if: fromJSON(inputs.matrix).artifact-suffix
        run: |
          cd $INSTALL_PATH
          ln -s /Applications SuperCollider/Applications
          mkdir -p SuperCollider/.background
          cp ../../package/background_2_arrow.png SuperCollider/.background/background_2_arrow.png
          cp ../../package/ds_store SuperCollider/.DS_Store
          # the following assumes that we end up with the build in the folder SuperCollider
          # hdiutil sometimes fails with "create failed - Resource busy"
          # when that happens, we run it again
          hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE || hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        if: fromJSON(inputs.matrix).artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
  test-macos:
    if: fromJSON(inputs.matrix).run-tests
    needs: build-macos
    uses: ./.github/workflows/test_macos.yml
    with:
      artifact-file: "SuperCollider-${{ fromJSON(inputs.params).sc-version }}-${{ fromJSON(inputs.matrix).artifact-suffix }}.dmg"
      os-version: ${{ fromJSON(inputs.matrix).os-version }}
      this-split: ${{ matrix.this-split }}
      nsplits: ${{ fromJSON(inputs.matrix).test-splits }}
    strategy:
      fail-fast: false
      matrix:
        this-split: ${{ fromJSON(inputs.matrix).splits-matrix }}
    secrets: inherit
