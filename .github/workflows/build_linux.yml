name: Build and Test Linux
on:
  workflow_call:
    inputs:
      params:
        required: true
        type: string
      matrix:
        required: true
        type: string

jobs:
  build-linux:
    runs-on: "ubuntu-${{ fromJSON(inputs.matrix).os-version }}"
    timeout-minutes: 15
    name: Ubuntu ${{ fromJSON(inputs.matrix).os-version }} ${{ fromJSON(inputs.matrix).c-compiler }} ${{ fromJSON(inputs.matrix).job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      USE_SYSLIBS: ${{ fromJSON(inputs.matrix).use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ fromJSON(inputs.matrix).shared-libscsynth }}
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      CC: ${{ fromJSON(inputs.matrix).c-compiler }}
      CXX: ${{ fromJSON(inputs.matrix).cxx-compiler }}
      ARTIFACT_FILE: "SuperCollider-${{ fromJSON(inputs.params).sc-version }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).c-compiler }}"

    steps:
      - uses: actions/checkout@v4
      - run: git submodule update --init --jobs ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}

      - name: prepare daily timestamp for cache
        id: current-date
        run: echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ~/.cache/ccache
          key: ${{ runner.os }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).c-compiler }}-${{ env.USE_SYSLIBS }}-${{ env.SHARED_LIBSCSYNTH }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).c-compiler }}-${{ env.USE_SYSLIBS }}-${{ env.SHARED_LIBSCSYNTH }}-

      - id: packages
        run: |
          PACKAGES='build-essential cmake pkg-config libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline6-dev libfftw3-dev libicu-dev libxt-dev libudev-dev emacs ccache'
          # install appropriate clang/gcc compilers
          if [[ "$CC" =~ clang-[1-9] ]]; then
            PACKAGES="$PACKAGES $CC" # package names are clang-X
            PACKAGES="$PACKAGES libc++-${CC##clang-}-dev libc++abi-${CC##clang-}-dev" # install additional libraries; package names are libc++-X-dev and libc++abi-X-dev
          elif [[ "$CC" =~ gcc-[1-9] ]]; then
            PACKAGES="$PACKAGES $CXX" # package names are g++-X
          fi
          # install system libraries
          if [[ "$USE_SYSLIBS" == true ]]; then
            PACKAGES="$PACKAGES libboost-thread-dev libboost-system-dev libboost-filesystem-dev libboost-regex-dev libboost-test-dev libboost-program-options-dev libyaml-cpp-dev"
          fi
          # install qt from apt
          PACKAGES="$PACKAGES qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools qt6-declarative-dev libqt6gui6 libqt6printsupport6 libqt6svgwidgets6 libqt6websockets6-dev libqt6webenginecore6 qt6-webengine-dev qt6-webengine-dev-tools libqt6webchannel6-dev libqt6opengl6-dev libqt6svg6-dev linguist-qt6 qt6-l10n-tools  libglx-dev libgl1-mesa-dev libvulkan-dev libxkbcommon-dev libxcb-xkb-dev"
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - uses: tecolicom/actions-use-apt-tools@e670504026a28f7072e37db1de6b256901c01b0f
        with:
          tools: ${{ steps.packages.outputs.packages }}
          cache: ${{ runner.os }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).c-compiler }}-${{ env.USE_SYSLIBS }}-${{ env.SHARED_LIBSCSYNTH }}

      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          CMAKE_BUILD_PARALLEL_LEVEL=1 cmake $EXTRA_CMAKE_FLAGS -DSC_EL=ON -DSC_VIM=ON -DSC_QT=ON -DSC_IDE=ON  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PATH -DCMAKE_BUILD_TYPE=Release .. # --debug-output

      - name: build
        run: |
          cd $BUILD_PATH
          make install -j${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}

      - name: create archive
        if: fromJSON(inputs.matrix).run-tests
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE.zip .

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        if: fromJSON(inputs.matrix).run-tests
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}.zip

  test-linux:
    if: fromJSON(inputs.matrix).run-tests
    needs: build-linux
    uses: ./.github/workflows/test_linux.yml
    with:
      artifact-file: "SuperCollider-${{ fromJSON(inputs.params).sc-version }}-${{ fromJSON(inputs.matrix).os-version }}-${{ fromJSON(inputs.matrix).c-compiler }}"
      os-version: ${{ fromJSON(inputs.matrix).os-version }}
      this-split: ${{ matrix.this-split }}
      nsplits: ${{ fromJSON(inputs.matrix).test-splits }}
    strategy:
      matrix:
        this-split: ${{ fromJSON(inputs.matrix).splits-matrix }}
    secrets: inherit
