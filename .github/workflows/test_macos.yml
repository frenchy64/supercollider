name: Test Mac OS
on:
  workflow_call:
    inputs:
      artifact-file:
        required: true
        type: string
      os:
        required: true
        type: string

env:
  INSTALL_PATH: build/Install
  ARTIFACT_FILE: ${{ inputs.artifact-file }}
  SCLANG: build/Install/SuperCollider/SuperCollider.app/Contents/MacOS/sclang
  SCRIPT_ADD_PATH: testsuite/scripts/add_include_path.scd
  SCRIPT_PRINT_RESULTS: testsuite/scripts/print_results.scd
  SCRIPT_RUN_TESTS: testsuite/scripts/sclang_test_runner.scd

jobs:
  test:
    runs-on: ${{ inputs.os }}
    timeout-minutes: 15
    outputs:
      job-total: ${{ strategy.job-total }}
    strategy:
      fail-fast: false
      matrix:
        # the length of this array determines how many jobs are used to partition the jobs.
        # the array contents are not used (suggest just counting up from 0).
        # array must be non-empty, otherwise tests won't run!
        id: [0,1,2,3,4]
    name: "Test macOS (${{ strategy.job-index }}th test clump)"
    env:
      TESTS_PATH: ${{ github.workspace }}/testsuite/classlibrary
      TEST_LIST_PROTO: testsuite/scripts/test_run_proto_gha.scd
      TEST_LIST_RESULT: testsuite/scripts/run/gha_result_${{ strategy.job-index }}.scxtar

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false # don't need submodules for testing

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}

      - name: Extract artifact
        run: |
          cd "$INSTALL_PATH"
          echo Contents of `pwd`:
          ls
          hdiutil attach $ARTIFACT_FILE
          echo "mkdir SuperCollider"
          mkdir SuperCollider
          cp -R /Volumes/SuperCollider/* SuperCollider/

      - name: Setup environment
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: brew install coreutils # to get 'timeout' utility

      - name: Run tests
        shell: bash
        continue-on-error: true
        run: |
          # add path
          $SCLANG $SCRIPT_ADD_PATH $TESTS_PATH
          # run tests
          timeout 1200 $SCLANG $SCRIPT_RUN_TESTS $TEST_LIST_PROTO $TEST_LIST_RESULT ${{ strategy.job-index }} ${{ strategy.job-total }}

      - name: Post test results
        shell: bash
        run: |
          timeout 1m $SCLANG $SCRIPT_PRINT_RESULTS $TEST_LIST_RESULT

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-list-result-${{ inputs.os }}-${{ inputs.artifact-file }}-${{ strategy.job-index }}
          path: ${{ env.TEST_LIST_RESULT }}

  results:
    runs-on: ${{ inputs.os }}
    if: always() && needs.test.outputs.job-total > 1
    needs: test
    timeout-minutes: 15
    name: "Print combined macOS results"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false # don't need submodules for testing

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: testsuite/scripts/run
          pattern: test-list-result-${{ inputs.os }}-${{ inputs.artifact-file }}-*
          merge-multiple: true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}

      - name: Extract artifact
        run: |
          cd "$INSTALL_PATH"
          echo Contents of `pwd`:
          ls
          hdiutil attach $ARTIFACT_FILE
          echo "mkdir SuperCollider"
          mkdir SuperCollider
          cp -R /Volumes/SuperCollider/* SuperCollider/

      - name: Setup environment
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: brew install coreutils # to get 'timeout' utility

      - name: Post combined results
        shell: bash
        run: |
          timeout 1m $SCLANG $SCRIPT_PRINT_RESULTS $(echo testsuite/scripts/run/gha_result_*.scxtar)
